# -*- coding: utf-8 -*-
"""SUNS_Z2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dxNx7FUiEHLMv5f6Xsj9mylu3Si7c7_x
"""

from google.colab import drive
drive.mount('/content/drive')
data_path = '/content/drive/MyDrive/SUNS/Zadanie2/'
train_data_path = data_path + 'train_dummy.csv'
test_data_path = data_path + 'test_dummy.csv'
train_original_path = data_path + 'train.csv'

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.tree import plot_tree
from sklearn.metrics import accuracy_score as acc
from sklearn.model_selection import GridSearchCV
from sklearn.svm import SVR
from sklearn.ensemble import RandomForestRegressor
import plotly.express as px
from sklearn.decomposition import PCA
import time
import plotly.graph_objects as go

test_data = pd.read_csv(test_data_path)
train_data = pd.read_csv(train_data_path)
train_original = pd.read_csv(train_original_path)

print(train_data.isna().sum().value_counts())
print(test_data.isna().sum().value_counts())
print(train_data.duplicated().value_counts())

corr = train_original.corr()
plt.figure(figsize=(30, 20))
sns.heatmap(corr, annot = True, cmap = 'coolwarm')
# print(corr['SalePrice'])
for name, val in corr['SalePrice'].items():
  if abs(val) > 0.5:
    print(name, ': ', round(val, 2))

fit = StandardScaler().fit(train_data)
print(train_data.mean().head(10))
train_scaled = pd.DataFrame(fit.transform(train_data), columns=train_data.columns)
test_scaled = pd.DataFrame(fit.transform(test_data), columns=test_data.columns)

y = train_scaled['SalePrice']
x = train_scaled.drop(columns=['SalePrice'])

y_test = test_scaled['SalePrice']
x_test = test_scaled.drop(columns=['SalePrice'])
print(train_scaled.mean().head())

reg = DecisionTreeRegressor()
reg.fit(x, y)

parameters={  "min_samples_split": [10, 20, 40],
              "max_depth": [2, 6, 8],
              "min_samples_leaf": [20, 40, 100],
              "max_leaf_nodes": [5, 20, 100],
              }

tuning_model=GridSearchCV(reg,param_grid=parameters,scoring='r2',cv=5, verbose=1)
tuning_model.fit(x, y)

print("R-Squared::{}".format(tuning_model.best_score_))
print("Best Hyperparameters::\n{}".format(tuning_model.best_params_))

reg_hyper_model = DecisionTreeRegressor(max_depth=8, min_samples_leaf=20 ,
                                        max_leaf_nodes=100, min_samples_split=20)
reg_hyper_model.fit(x, y)
pred = reg_hyper_model.predict(x_test)

print('MSE: ', mean_squared_error(y_test, pred))
print('R2: ', r2_score(y_test, pred))

plt.figure(figsize=(500,100))
plot_tree(reg_hyper_model, feature_names=x.columns);

plt.scatter(y_test, pred)

param_grid = {'C': [0.1,1, 10, 100], 'gamma': [1,0.1,0.01,0.001],'kernel': ['rbf', 'poly', 'linear']}

tuning_model_svm = GridSearchCV(SVR(), param_grid=param_grid, scoring='r2', cv=3, verbose=3)
tuning_model_svm.fit(x, y)

print("R-Squared::{}".format(tuning_model_svm.best_score_))
print("Best Hyperparameters::\n{}".format(tuning_model_svm.best_params_))

results = pd.read_csv('out.csv')
# results = pd.DataFrame(tuning_model_svm.cv_results_)
# results.to_csv('out.csv')
print(results.columns)

fig = px.scatter_3d(results, x='param_C', y='param_gamma', z='mean_test_score', color='param_kernel')
# fig.write_html("grid.html")
fig.show()

svm_model = SVR(C=0.1, gamma=1, kernel='linear', epsilon=0.1)
svm_model.fit(x, y)

pred = svm_model.predict(x_test)

print('MSE: ', mean_squared_error(y_test, pred))
print('R2: ', r2_score(y_test, pred))

plt.scatter(y_test, pred)

param_grid = {'n_estimators' : [20, 40, 60, 80, 100],
              "min_samples_split": [10, 20, 40],
              "max_depth": [2, 6, 8],
              "min_samples_leaf": [20, 40, 100],
              "max_leaf_nodes": [5, 20, 100],
              }

tuning_model_rfr = GridSearchCV(RandomForestRegressor(), param_grid=param_grid, scoring='r2', cv=3, verbose=1)
tuning_model_rfr.fit(x, y)

print("R-Squared::{}".format(tuning_model_rfr.best_score_))
print("Best Hyperparameters::\n{}".format(tuning_model_rfr.best_params_))

rfr_model = RandomForestRegressor(max_depth=8, max_leaf_nodes=100, min_samples_leaf=20, min_samples_split=10, n_estimators=100)
rfr_model.fit(x, y)

pred = rfr_model.predict(x_test)

print('MSE: ', mean_squared_error(y_test, pred))
print('R2: ', r2_score(y_test, pred))

plt.scatter(y_test, pred)

feat_importances = pd.Series(rfr_model.feature_importances_, index=x.columns)
feat_importances.nlargest(15).plot(kind='barh')
plt.show()

fig = px.scatter_3d(train_data, x='GarageArea', y='GrLivArea', z='1stFlrSF', color='SalePrice')
fig.show()
fig.write_html('diagram.html')

result1 = train_original.loc[(train_original['GarageArea'] > 883) & (train_original['1stFlrSF'] > 3137)]
#SaleCondition = Partial
result2 = train_original.loc[(train_original['SalePrice'] >= 745000) & (train_original['SalePrice'] < 8000000)]
results = pd.concat([result1, result2])
results.to_csv('out.csv')

pca = PCA(n_components=3)
principalComponents = pca.fit_transform(x)
principalDf = pd.DataFrame(data=principalComponents, columns = ['PC1', 'PC2', 'PC3'])

fig = px.scatter_3d(principalDf, x='PC1', y='PC2', z='PC3', color=train_data['SalePrice'])
fig.show()

corr_dummy = train_data.corr()  
print(corr_dummy.shape)
corr_dummy.drop(corr_dummy[abs(corr_dummy['SalePrice']) < 0.1].index, inplace=True)
print(corr_dummy.shape)
print(corr_dummy.index)

x = train_scaled[corr_dummy.index]
x = x.drop(columns=['SalePrice'])
x_test = test_scaled[corr_dummy.index]
x_test = x_test.drop(columns=['SalePrice'])

pca = PCA(n_components=5)

fit = pca.fit(x)
x_pc = fit.transform(x)
x_test_pc = fit.transform(x_test)

print(x_pc.shape)
print(x_test_pc.shape)

svm_model = SVR(C=10, gamma=0.001, kernel='rbf')
start = time.perf_counter()
svm_model.fit(x_pc, y)
stop = time.perf_counter()
time_diff = stop-start
pred = svm_model.predict(x_test_pc)

print('MSE: ', mean_squared_error(y_test, pred))
print('R2: ', r2_score(y_test, pred))

plt.scatter(y_test, pred)

results = {'Time': time_diff, 
           'N': 5,
           'Score': r2_score(y_test, pred)}
results_rbf_df = pd.DataFrame(results, index=[0])

svm_model = SVR(C=0.1, gamma=1, kernel='linear')
start = time.perf_counter()
svm_model.fit(x_pc, y)
stop = time.perf_counter()
time_diff = stop - start
pred = svm_model.predict(x_test_pc)

print('MSE: ', mean_squared_error(y_test, pred))
print('R2: ', r2_score(y_test, pred))

plt.scatter(y_test, pred)

results = {'Time': time_diff, 
           'N': 5,
           'Score': r2_score(y_test, pred)}
results_linear_df = pd.DataFrame(results, index=[0])

pca = PCA(n_components=10)

fit = pca.fit(x)
x_pc = fit.transform(x)
x_test_pc = fit.transform(x_test)

svm_model = SVR(C=10, gamma=0.001, kernel='rbf')
start = time.perf_counter()
svm_model.fit(x_pc, y)
stop = time.perf_counter()
time_diff = stop-start
pred = svm_model.predict(x_test_pc)

print('MSE: ', mean_squared_error(y_test, pred))
print('R2: ', r2_score(y_test, pred))

plt.scatter(y_test, pred)

results_rbf_df.loc[len(results_rbf_df.index)] = [time_diff, 10, r2_score(y_test, pred)]

svm_model = SVR(C=0.1, gamma=1, kernel='linear')
start = time.perf_counter()
svm_model.fit(x_pc, y)
stop = time.perf_counter()
time_diff = stop - start
pred = svm_model.predict(x_test_pc)

print('MSE: ', mean_squared_error(y_test, pred))
print('R2: ', r2_score(y_test, pred))

plt.scatter(y_test, pred)
results_linear_df.loc[len(results_linear_df.index)] = [time_diff, 10, r2_score(y_test, pred)]

pca = PCA(n_components=25)

fit = pca.fit(x)
x_pc = fit.transform(x)
x_test_pc = fit.transform(x_test)

svm_model = SVR(C=10, gamma=0.001, kernel='rbf')
start = time.perf_counter()
svm_model.fit(x_pc, y)
stop = time.perf_counter()
time_diff = stop-start
pred = svm_model.predict(x_test_pc)

print('MSE: ', mean_squared_error(y_test, pred))
print('R2: ', r2_score(y_test, pred))

plt.scatter(y_test, pred)
results_rbf_df.loc[len(results_rbf_df.index)] = [time_diff, 25, r2_score(y_test, pred)]

svm_model = SVR(C=0.1, gamma=1, kernel='linear')
start = time.perf_counter()
svm_model.fit(x_pc, y)
stop = time.perf_counter()
time_diff = stop - start
pred = svm_model.predict(x_test_pc)

print('MSE: ', mean_squared_error(y_test, pred))
print('R2: ', r2_score(y_test, pred))

plt.scatter(y_test, pred)
results_linear_df.loc[len(results_linear_df.index)] = [time_diff, 25, r2_score(y_test, pred)]

pca = PCA(n_components=50)

fit = pca.fit(x)
x_pc = fit.transform(x)
x_test_pc = fit.transform(x_test)

svm_model = SVR(C=10, gamma=0.001, kernel='rbf')
start = time.perf_counter()
svm_model.fit(x_pc, y)
stop = time.perf_counter()
time_diff = stop - start
pred = svm_model.predict(x_test_pc)

print('MSE: ', mean_squared_error(y_test, pred))
print('R2: ', r2_score(y_test, pred))

plt.scatter(y_test, pred)
results_rbf_df.loc[len(results_rbf_df.index)] = [time_diff, 50, r2_score(y_test, pred)]

svm_model = SVR(C=0.1, gamma=1, kernel='linear')
start = time.perf_counter()
svm_model.fit(x_pc, y)
stop = time.perf_counter()
time_diff = stop - start
pred = svm_model.predict(x_test_pc)

print('MSE: ', mean_squared_error(y_test, pred))
print('R2: ', r2_score(y_test, pred))

plt.scatter(y_test, pred)
results_linear_df.loc[len(results_linear_df.index)] = [time_diff, 50, r2_score(y_test, pred)]

pca = PCA(n_components=100)

fit = pca.fit(x)
x_pc = fit.transform(x)
x_test_pc = fit.transform(x_test)

svm_model = SVR(C=10, gamma=0.001, kernel='rbf')
start = time.perf_counter()
svm_model.fit(x_pc, y)
stop = time.perf_counter()
time_diff = stop - start
pred = svm_model.predict(x_test_pc)

print('MSE: ', mean_squared_error(y_test, pred))
print('R2: ', r2_score(y_test, pred))

plt.scatter(y_test, pred)
results_rbf_df.loc[len(results_rbf_df.index)] = [time_diff, 100, r2_score(y_test, pred)]

svm_model = SVR(C=0.1, gamma=1, kernel='linear')
start = time.perf_counter()
svm_model.fit(x_pc, y)
stop = time.perf_counter()
time_diff = stop - start
pred = svm_model.predict(x_test_pc)

print('MSE: ', mean_squared_error(y_test, pred))
print('R2: ', r2_score(y_test, pred))

plt.scatter(y_test, pred)
results_linear_df.loc[len(results_linear_df.index)] = [time_diff, 100, r2_score(y_test, pred)]

print(results_rbf_df.head())

print(results_linear_df.head())

fig = px.line(results_rbf_df, x='N', y='Score', markers=True)
fig.show()

df = results_rbf_df.sort_values(by='Time')
fig = px.line(df, x='Time', y='Score', markers=True)
fig.show()

fig = px.line(results_linear_df, x='N', y='Score', markers=True)
fig.show()

df = results_linear_df.sort_values(by='Time')
fig = px.line(df, x='Time', y='Score', markers=True)
fig.show()

fig = px.histogram(train_original, x='SalePrice')
fig.show()
print(train_original.shape)

fig = px.histogram(train_original, x='YearBuilt')
fig.show()

fig = go.Figure()
df = train_original.sort_values(by='GrLivArea')

fig.add_trace(go.Scatter(x=df['GrLivArea'], y=df['SalePrice'],
                    mode='lines',
                    name='GrLivArea'))

df = train_original.sort_values(by='2ndFlrSF')

fig.add_trace(go.Scatter(x=df['2ndFlrSF'], y=df['SalePrice'],
                    mode='lines',
                    name='2ndFlrSF'))
df = train_original.sort_values(by='1stFlrSF')

fig.add_trace(go.Scatter(x=df['1stFlrSF'], y=df['SalePrice'],
                    mode='lines',
                    name='1stFlrSF'))

fig.update_layout( xaxis_title='Area',
                   yaxis_title='Price')


fig.show()

groups = train_original.groupby('YrSold')
# print(groups.get_group(2006))
# print(groups.get_group(2006)['SalePrice'].max())
data = []
for year in train_original['YrSold'].unique():
  data.append([year, groups.get_group(year)['SalePrice'].max(), groups.get_group(year)['SalePrice'].min()])
df = pd.DataFrame(data, columns=['Year', 'Max', 'Min'])

fig = px.bar(df, x='Year', y=['Max', 'Min'], barmode='group', text_auto=True)
fig.update_traces(textfont_size=12, textangle=0, textposition="outside", cliponaxis=False)
fig.show()